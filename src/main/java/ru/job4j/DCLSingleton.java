package ru.job4j;

public final class DCLSingleton {
    private static volatile DCLSingleton inst;

    public static DCLSingleton instOf() {
        if (inst == null) {
            synchronized (DCLSingleton.class) {
                if (inst == null) {
                    inst = new DCLSingleton();
                }
            }
        }
        return inst;
    }
    
    
    private DCLSingleton() {
    }
}

/* Шаблон "Double-Checked Locking"
- параллельный шаблон проектирования, предназначающийся для уменьшения накладных расходов, связанных с получением блокировки.
Сначала проверяется условие блокировки без какой-либо синхронизации;
поток делает попытку получить блокировку, только если результат проверки говорит о том, что получение блокировки необходимо.

Т.е. если потоки ПИШУТ в общую переменную, то нужна синхронизация, а если нужно только ЧИТАТЬ переменную - то нет.
Cинхронизация необходима только в первый раз, когда создается экземпляр Singleton, когда потоки получают синглтон она не нужна.
Суть блокировки:
1. Сначала проверяется, инициализирована ли переменная (без получения блокировки). Если она инициализирована, её значение возвращается немедленно.
2. Получение блокировки. Повторно проверяется, инициализирована ли переменная, так как вполне возможно,
что после первой проверки другой поток инициализировал переменную. Если она инициализирована, её значение возвращается.
3. В противном случае, переменная инициализируется и возвращается. */